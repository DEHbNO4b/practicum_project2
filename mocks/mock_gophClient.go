// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DEHbNO4b/practicum_project2/proto/gen/keeper/proto (interfaces: GophKeeperClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pbkeeper "github.com/DEHbNO4b/practicum_project2/proto/gen/keeper/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGophKeeperClient is a mock of GophKeeperClient interface.
type MockGophKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperClientMockRecorder
}

// MockGophKeeperClientMockRecorder is the mock recorder for MockGophKeeperClient.
type MockGophKeeperClientMockRecorder struct {
	mock *MockGophKeeperClient
}

// NewMockGophKeeperClient creates a new mock instance.
func NewMockGophKeeperClient(ctrl *gomock.Controller) *MockGophKeeperClient {
	mock := &MockGophKeeperClient{ctrl: ctrl}
	mock.recorder = &MockGophKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperClient) EXPECT() *MockGophKeeperClientMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockGophKeeperClient) Login(arg0 context.Context, arg1 *pbkeeper.AuthInfo, arg2 ...grpc.CallOption) (*pbkeeper.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*pbkeeper.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophKeeperClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophKeeperClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockGophKeeperClient) Register(arg0 context.Context, arg1 *pbkeeper.AuthInfo, arg2 ...grpc.CallOption) (*pbkeeper.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*pbkeeper.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophKeeperClientMockRecorder) Register(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophKeeperClient)(nil).Register), varargs...)
}

// SaveBinary mocks base method.
func (m *MockGophKeeperClient) SaveBinary(arg0 context.Context, arg1 *pbkeeper.BinaryData, arg2 ...grpc.CallOption) (*pbkeeper.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBinary", varargs...)
	ret0, _ := ret[0].(*pbkeeper.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBinary indicates an expected call of SaveBinary.
func (mr *MockGophKeeperClientMockRecorder) SaveBinary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBinary", reflect.TypeOf((*MockGophKeeperClient)(nil).SaveBinary), varargs...)
}

// SaveCard mocks base method.
func (m *MockGophKeeperClient) SaveCard(arg0 context.Context, arg1 *pbkeeper.CardData, arg2 ...grpc.CallOption) (*pbkeeper.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveCard", varargs...)
	ret0, _ := ret[0].(*pbkeeper.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCard indicates an expected call of SaveCard.
func (mr *MockGophKeeperClientMockRecorder) SaveCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCard", reflect.TypeOf((*MockGophKeeperClient)(nil).SaveCard), varargs...)
}

// SaveLogPass mocks base method.
func (m *MockGophKeeperClient) SaveLogPass(arg0 context.Context, arg1 *pbkeeper.LogPassData, arg2 ...grpc.CallOption) (*pbkeeper.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveLogPass", varargs...)
	ret0, _ := ret[0].(*pbkeeper.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveLogPass indicates an expected call of SaveLogPass.
func (mr *MockGophKeeperClientMockRecorder) SaveLogPass(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogPass", reflect.TypeOf((*MockGophKeeperClient)(nil).SaveLogPass), varargs...)
}

// SaveText mocks base method.
func (m *MockGophKeeperClient) SaveText(arg0 context.Context, arg1 *pbkeeper.TextData, arg2 ...grpc.CallOption) (*pbkeeper.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveText", varargs...)
	ret0, _ := ret[0].(*pbkeeper.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveText indicates an expected call of SaveText.
func (mr *MockGophKeeperClientMockRecorder) SaveText(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveText", reflect.TypeOf((*MockGophKeeperClient)(nil).SaveText), varargs...)
}

// ShowData mocks base method.
func (m *MockGophKeeperClient) ShowData(arg0 context.Context, arg1 *pbkeeper.Empty, arg2 ...grpc.CallOption) (*pbkeeper.Data, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShowData", varargs...)
	ret0, _ := ret[0].(*pbkeeper.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowData indicates an expected call of ShowData.
func (mr *MockGophKeeperClientMockRecorder) ShowData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowData", reflect.TypeOf((*MockGophKeeperClient)(nil).ShowData), varargs...)
}
